package sec03.exam02;

public class OperationExample {
    public static void main(String[] args) {
        int x = -100;
        int result1 = +x;
        int result2 = -x;
        System.out.println("result1=" + result1);
        System.out.println("result2=" + result2);
        /*
        +는 변수값의 부호를 유지하고, -는 변수값의 부호를 바꾼다
         */

        byte b = 100;
        /*
        여기서 result 타입을 byte 로 바꾸면 컴파일 에러가 난다
        본래 byte 타입을 부호 연산하면 int로 자동 변환 되기 때문이다
         */
        int result3 = -b;
        System.out.println("result3=" + result3);

        /*
        연산에 사용되는 표시나 기호를 연산자라고 한다
        연산자와 함께 연산되는 데이터를 피연산자라고 하고 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것을 연산식이라고 한다
        ex - x+y, x-y, x*y 여기에서 +, -, * 는 연산자이고 x,y 변수는 피연산자이다

        자바는 다양한 연산자를 제공한다
        해당 연산자들은 피연산자를 연산해서 값을 산출하는데, 산출되는 값의 타입은 연산자별로 다르다

        예를 들어 산출 연산자는 숫자 타입 (byte, short, int, long, float, double) 으로 결과 값이 나오고,
        비교 연산자와 논리 연산자는 논리 타입 (boolean) 으로 결과 값이 나온다

        다음은 자바에서 제공하는 연산자이다

        산술 - [+, -, *, /, %] 피연산자의 수는 2항, 숫자로 산출되며 사칙연산 및 나머지 계산의 기능을 갖고 있다
        부호 - [+, -] 피연산자의 수는 단항, 숫자로 산출되며 음수와 양수의 부호를 나타낸다
        문자열 - [+] 피연산자의 수는 2항, 문자열로 산출되며 두 문자열을 연결하는 기능을 갖고 있다
        대입 - [=, +=, -=, *=, /=, %=] 피연산자의 수는 2항, 다양으로 산출되며 우변의 값을 좌변의 변수에 대입하는 기능을 갖고 있다
        증감 - [++, --] 피연산자의 수는 단항, 숫자로 산출되며 1만큼 증가/감소를 나타낸다
        비교 - [==, !=, >, <, >=, <=, instanceof] 피연산자의 수는 2항, boolean으로 산출되며 값의 비교 기능을 갖고 있다
        논리 - [!, &, |, &&, ||] 피연산자수로 단항과 2항을 가지며, boolean으로 산출된다
              논리 부정, 논리곱, 논리합을 나타낸다
        조건 - [(조건식)?A:B] - 피연산자 수는 3항, 산출값은 다양하며 조건식에 따라 A 또는 B 를 선택하는 기능을 갖고 있다

        연산식은 다른 연산식의 피연산자 위치에 올 수 있다

        연산식은 다양한 연산자가 복합적으로 구성된 경우가 많다

        따라서 각 연산자들의 우선 순위를 숙지하는 것은 매우 중요하다
        연산자는 기본적으로 단항, 이항, 삼항 순으로 우선 순위를 가진다
        산술, 비교, 논리, 대입 순으로 우선 순위를 가지며
        단항, 부호, 대입 연산자를 제외한 모든 연산의 방향은 왼쪽에서 오른쪽으로 향한다 (->)
        복잡한 연산식에는 괄호 ()를 사용해 우선 순위를 설정한다
        증감 (++,--)과 대입(=, +=, -=)은 오른쪽에서 왼쪽으로 연산된다 (<-)

         */


    }
}
