package sec03.exam03;

public class ConditionalExample9 {
    public static void main(String[] args) {
        for(int i=1; i<=10; i++) {
            System.out.println(i);

            /*
            반복문은 어떤 작업이 반복적으로 실행되도록 할 때 사용되며, 반목문의 종류로는 for문, while문, do-while문이 있다

            for문과 while문은 서로 변환이 가능하기 때문에 반복문을 작성할 때 어느 쪽을 선택해도 좋지만
            for문은 반복 횟수를 알고 있을 때 주로 사용하고, while문은 조건에 따라 반복할 때 주로 사용한다
            while문과 do-whle문의 차이는 조건을 먼저 검사하느냐 나중에 검사하느냐일 뿐 동작 방식은 동일하다

            <for문>

               프로그램을 작성하다 보면 똑같은 실행문을 반복적으로 실행해야 할 경우가 많이 발생한다
               다음 코드는 1부터 5까지의 합을 구하는 것으로, 5개의 실행문으로 해결했다
               하지만 1부터 100까지의 합을 구하는 코드를 같은 방법으로 작성한다면 100개의 실행문이 필요하기 때문에 코드 양이 엄청 늘어날 것이다

               ex - int sum = 0;
                    sum = sum + 1;
                    sum = sum + 2;
                    sum = sum + 3;
                    sum = sum + 4;
                    sum = sum + 5;
                    System.out.println("1~5의 합:" + sum);

                    이런 경우 for문을 사용하면 코드를 획기적으로 줄일 수 있다

                    ex - int sum = 0;
                    for (int i=1; i<=100; i++) {
                      sum = sum + i;
                    }
                    System.out.println("1~100의 합:" + sum);

                    위 for문은 100개의 실행문을 단 3줄로 압축한 것이라고 볼 수 있다
                    반복문은 한 번 작성된 실행문을 여러 번 반복 실행해주기 때문에 코드를 줄여 간결하게 만들어준다
                    코드가 간결하면 개발 시간을 줄일 수 있고 에러가 날 확률도 줄어든다

                    for문은 주어진 횟수만큼 실행문을 반복 실행할 때 적합한 반복 제어문이다

                    for (1 초기화식; 2 조건식; 4 증감식) {
                                  조건식이 true일 경우

                                  3 실행문;

                    1. for문이 처음 실행될 때 초기화식 1이 제일 먼저 실행
                    2. 조건식 2를 평가해 true면 for문 블록 내부의 실행문 3을 실행하고 false이면 for문 블록을 실행하지 않고 종료한다
                    3. 블록 내부의 실행문 3들이 모두 실행되면 증감식 4를 실행하고 다시 조건식 2를 평가한다
                    4. 조건식 2의 평가 결과가 true면 실행문 3 -> 증감식 4 -> 조건식 2 순으로 다시 진행하고, false이면 for문이 종료된다
             */
        }
    }
}
